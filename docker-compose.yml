services:
  db:
    image: postgres:16-alpine
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    networks:
      - my_network
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: mydatabase
      TZ: UTC
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  cache:
    image: redis:7-alpine
    container_name: my_redis
    restart: always
    networks:
      - my_network
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s

  web:
    build: .
    ports:
      - "${APP_PORT}:3000"
    healthcheck:
      test: ["CMD-SHELL","wget -q --spider http://localhost:3000/health || exit 1"]
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - my_network
    environment:
      DATABASE_URL: postgres://myuser:${POSTGRES_PASSWORD}@db:5432/mydatabase
      REDIS_URL: ${REDIS_URL}
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy  

volumes:
  pgdata:
    driver: local

networks:
  my_network:
    driver: bridge  

# (healthcheck/logging/restart go here at this same indent level)

# ENV NODE_ENV=production